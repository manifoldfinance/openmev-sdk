{"version":3,"file":"sdk-connect.cjs.development.js","sources":["../src/connector.ts","../src/index.ts"],"sourcesContent":["/**\n * @package OpenMevSocket\n * @version 0.2.0\n * @see docs.openmev.org\n */\nimport { io, Socket } from 'socket.io-client';\nimport { BigNumberish } from '@ethersproject/bignumber';\nimport { getDefaultProvider } from '@ethersproject/providers';\n// import { hexDataLength, hexDataSlice, hexlify } from '@ethersproject/bytes'\n// import { defaultAbiCoder } from '@ethersproject/abi';\n/**\n * @configure JSON_RPC_URL is default\n * @configure RPC_URL for failover\n */\nconst defaultServerUrl = 'https://api.sushirelay.com/v1';\nconst JSON_RPC_URL = 'https://api.staging.sushirelay.com/v1';\nconst RPC_URL = process.env.RPC_URL;\nconst tokenKey = `SESSION_TOKEN`;\n\n/**\n * @exports provider\n * @const getDefaultProvider\n * @\n */\nexport const provider = getDefaultProvider(JSON_RPC_URL || RPC_URL);\n\nexport enum Event {\n  FEES_CHANGE = 'FEES_CHANGE',\n  SOCKET_SESSION = 'SOCKET_SESSION',\n  SOCKET_ERR = 'SOCKET_ERR',\n  BUNDLE_REQUEST = 'BUNDLE_REQUEST',\n  OPENMEV_BUNDLE_REQUEST = 'OPENMEV_BUNDLE_REQUEST',\n  BUNDLE_STATUS_REQUEST = 'BUNDLE_STATUS_REQUEST',\n  BUNDLE_RESPONSE = 'BUNDLE_RESPONSE',\n  BUNDLE_CANCEL_REQUEST = 'BUNDLE_CANCEL_REQUEST',\n}\n\nexport interface Fee {\n  maxFeePerGas: BigNumberish;\n  maxPriorityFeePerGas: BigNumberish;\n}\nexport interface Fees {\n  block: number;\n  baseFeePerGas: BigNumberish;\n  default: Fee;\n  low: Fee;\n  med: Fee;\n  high: Fee;\n}\n\nexport enum Status {\n  PENDING_BUNDLE = 'PENDING_BUNDLE',\n  FAILED_BUNDLE = 'FAILED_BUNDLE',\n  SUCCESSFUL_BUNDLE = 'SUCCESSFUL_BUNDLE',\n  REPLACE_BUNDLE_SUCCESSFUL = 'REPLACE_BUNDLE_SUCCESSFUL',\n  BUNDLE_NOT_FOUND = 'BUNDLE_NOT_FOUND',\n}\n\nexport const STATUS_LOCALES: Record<string, string> = {\n  PENDING_BUNDLE: 'Transaction Accepted',\n  FAILED_BUNDLE: 'Failed: Revert',\n  SUCCESSFUL_BUNDLE: 'Success',\n  REPLACE_BUNDLE_SUCCESSFUL: 'Replaced',\n  BUNDLE_NOT_FOUND: 'Failed: Not Found',\n};\n\nexport enum Debug {\n  BLOCKTYPE_FLASHBOTS = 'BLOCKTYPE_FLASHBOTS',\n  BLOCKTYPE_EDENNETWORK = 'BLOCKTYPE_EDENNETWORK',\n  BUNDLE_OUTBID = 'BUNDLE_OUTBID',\n  ERROR_BLOCKHEAD = 'ERROR_BLOCKHEAD',\n  ERROR_BLOCKDATA = 'ERROR_BLOCKDATA',\n  ERROR_UNKNOWN = 'ERROR_UNKNOWN',\n}\n\nexport type ConnectionInfo = {\n  url: string;\n  headers?: { [key: string]: string | number };\n\n  user?: string;\n  password?: string;\n\n  allowInsecureAuthentication?: boolean;\n  allowGzip?: boolean;\n\n  throttleLimit?: number;\n  throttleSlotInterval?: number;\n  throttleCallback?: (attempt: number, url: string) => Promise<boolean>;\n\n  timeout?: number;\n};\n\nexport interface OnceBlockable {\n  once(eventName: 'block', handler: () => void): void;\n}\n\nexport interface OncePollable {\n  once(eventName: 'poll', handler: () => void): void;\n}\n\nexport type PollOptions = {\n  timeout?: number;\n  floor?: number;\n  ceiling?: number;\n  interval?: number;\n  retryLimit?: number;\n  onceBlock?: OnceBlockable;\n  oncePoll?: OncePollable;\n};\n\nexport interface platformVersion {\n  api: number;\n  client: string;\n}\n\nexport interface SocketSession {\n  token: string;\n  version: platformVersion | any;\n}\n\n/**\n * @export\n * @interface TransactionReq\n */\nexport interface TransactionReq {\n  serialized: string;\n  raw: SwapRequest | undefined;\n  estimatedGas?: number;\n  estimatedEffectiveGasPrice?: number;\n}\n/**\n * @export\n * @interface TransactionProcessed\n */\nexport interface TransactionProcessed {\n  serialized: string;\n  bundle: string;\n  raw: SwapRequest | undefined;\n  estimatedGas: number;\n  estimatedEffectiveGasPrice: number;\n}\n/**\n * @export\n * @interface BundleRequest\n */\nexport interface BundleRequest {\n  transactions: TransactionReq[] | string[];\n  chainId?: number;\n  bribe?: string;\n  from?: string;\n  deadline?: BigNumberish;\n  simulateOnly?: boolean;\n}\n\n/**\n *\n * @interface SwapRequest\n * @param {amount0, amount1, path, to}\n */\nexport interface SwapRequest {\n  amount0: BigNumberish;\n  amount1: BigNumberish;\n  path: Array<string>;\n  to: string;\n}\n\n/**\n * @export\n * @interface Backrun\n */\nexport interface Backrun {\n  best: {\n    backrunner: string;\n    count: number;\n    duration: number;\n    totalGasLimit: BigNumberish;\n    totalGasPrice: BigNumberish;\n    totalMaxFeePerGas: BigNumberish;\n    totalMaxPriorityFeePerGas: BigNumberish;\n    transactions: any[];\n  };\n}\n\n/**\n *\n * @interface BundleProcessed\n */\nexport interface BundleProcessed {\n  id: string;\n  transactions: TransactionProcessed[];\n  bribe: BigNumberish;\n  sessionToken: string;\n  chainId: number;\n  timestamp: number;\n  totalEstimatedGas: number;\n  totalEstimatedEffectiveGasPrice: number;\n  from: string;\n  deadline: BigNumberish;\n  simulateOnly: boolean;\n  backrun: Backrun;\n}\n\n/**\n *\n * @interface BundleProcessed\n */\nexport interface BundleResponse {\n  bundle: BundleProcessed;\n  status: string;\n  message: string;\n  error: string;\n}\n\nexport interface BundleResponseApi {\n  bundle: {\n    id: string;\n    transactions: string[];\n  };\n  status: string;\n  message: string;\n  error: string;\n}\n/**\n * @interface QuoteEventsMap\n */\ninterface QuoteEventsMap {\n  [Event.SOCKET_SESSION]: (response: SocketSession) => void;\n  [Event.SOCKET_ERR]: (err: any) => void;\n  [Event.FEES_CHANGE]: (response: Fees) => void;\n  [Event.BUNDLE_REQUEST]: (response: any) => void;\n  [Event.OPENMEV_BUNDLE_REQUEST]: (response: any) => void;\n  [Event.BUNDLE_RESPONSE]: (\n    response: BundleResponse | BundleResponseApi,\n  ) => void;\n  [Event.BUNDLE_CANCEL_REQUEST]: (serialized: any) => void;\n  [Event.BUNDLE_STATUS_REQUEST]: (serialized: any) => void;\n}\n\ninterface SocketOptions {\n  onConnect?: () => void;\n  onConnectError?: (err: any) => void;\n  onDisconnect?: (err: any) => void;\n  onError?: (err: any) => void;\n  onFeesChange?: (fees: Fees) => void;\n  onSocketSession?: (session: any) => void;\n  onTransactionResponse?: (\n    response: BundleResponse | BundleResponseApi,\n  ) => void;\n}\n\nexport class OpenMEVSocket {\n  private socket: Socket<QuoteEventsMap, QuoteEventsMap>;\n\n  constructor(serverUrl: string = defaultServerUrl) {\n    const token = localStorage.getItem(tokenKey);\n    const socket: Socket<QuoteEventsMap, QuoteEventsMap> = io(serverUrl, {\n      transports: ['websocket'],\n      auth: { token },\n      reconnection: true,\n      reconnectionDelay: 5000,\n      autoConnect: true,\n    });\n    this.socket = socket;\n  }\n\n  private disconnect() {\n    this.socket.off('connect');\n    this.socket.off('connect_error');\n    this.socket.off(Event.SOCKET_ERR);\n    this.socket.off(Event.SOCKET_SESSION);\n    this.socket.off(Event.FEES_CHANGE);\n    this.socket.off(Event.BUNDLE_RESPONSE);\n  }\n\n  public closeConnection() {\n    this.socket.disconnect();\n  }\n\n  public init({\n    onConnect,\n    onConnectError,\n    onDisconnect,\n    onError,\n    onFeesChange,\n    onSocketSession,\n    onTransactionResponse,\n  }: SocketOptions): () => void {\n    /**\n     *\n     * @event onConnect\n     *\n     */\n    this.socket.on('connect', () => {\n      if (onConnect) onConnect();\n    });\n\n    /**\n     *\n     * @event onConnectError\n     *\n     */\n    this.socket.on('connect_error', (err: any) => {\n      if (onConnectError) onConnectError(err);\n    });\n\n    /**\n     * @event onDisconnect\n     */\n    this.socket.on('disconnect', (err: any) => {\n      if (onDisconnect) onDisconnect(err);\n    });\n\n    /**\n     * @event onError\n     */\n    this.socket.on(Event.SOCKET_ERR, (err: any) => {\n      if (onError) onError(err);\n    });\n\n    /**\n     * @event onSocketSession\n     * @note Stores the session token in the browser local storage\n     */\n    this.socket.on(Event.SOCKET_SESSION, (session: any) => {\n      localStorage.setItem(tokenKey, session.token);\n      if (onSocketSession) onSocketSession(session);\n    });\n\n    /**\n     * @event onFeesChange\n     */\n    this.socket.on(Event.FEES_CHANGE, (response: Fees) => {\n      if (onFeesChange) onFeesChange(response);\n    });\n\n    /**\n     * @event onTransactionResponse\n     */\n    this.socket.on(\n      Event.BUNDLE_RESPONSE,\n      (response: BundleResponse | BundleResponseApi) => {\n        if (onTransactionResponse) onTransactionResponse(response);\n      },\n    );\n\n    /**\n     * @dev Returns function used to stop listening to all connected socket events.\n     */\n    return () => {\n      this.disconnect();\n    };\n  }\n\n  public emitBundleRequest(bundle: BundleRequest) {\n    this.socket.emit(Event.BUNDLE_REQUEST, bundle);\n  }\n\n  public emitTransactionRequest(bundle: BundleRequest) {\n    this.socket.emit(Event.OPENMEV_BUNDLE_REQUEST, bundle);\n  }\n\n  public emitStatusRequest(id: string) {\n    this.socket.emit(Event.BUNDLE_STATUS_REQUEST, { id });\n  }\n\n  public emitTransactionCancellation(id: string) {\n    this.socket.emit(Event.BUNDLE_CANCEL_REQUEST, { id });\n  }\n}\n\n/*\nexport async function tryGetRevertReason(to: string, from: string, data: string): Promise<string | undefined> {\n  const provider = getDefaultProvider();\n  const tx = { to, from, data };\n  try {\n    await provider.estimateGas(tx);\n  } catch {\n    const value = await provider.call(tx);\n    return hexDataLength(value) % 32 === 4 && hexDataSlice(value, 0, 4) === '0x08c379a0'\n      ? defaultAbiCoder.decode(['string'], hexDataSlice(value, 4))\n      : undefined;\n  }\n  return undefined;\n}\n*/\n\n/** @exports connector */\n","/**\n * @package OpenMEV/SDK-Connector\n * @version 0.2.0\n * @license Apache-2.0\n * @export connector\n * @since v0.3.0\n */\nimport { OpenMEVSocket } from './connector';\nexport default OpenMEVSocket;\n//export * from './connector';\n"],"names":["defaultServerUrl","RPC_URL","process","env","tokenKey","Event","Status","Debug","OpenMEVSocket","serverUrl","token","localStorage","getItem","socket","io","transports","auth","reconnection","reconnectionDelay","autoConnect","disconnect","off","SOCKET_ERR","SOCKET_SESSION","FEES_CHANGE","BUNDLE_RESPONSE","closeConnection","init","onConnect","onConnectError","onDisconnect","onError","onFeesChange","onSocketSession","onTransactionResponse","on","err","session","setItem","response","emitBundleRequest","bundle","emit","BUNDLE_REQUEST","emitTransactionRequest","OPENMEV_BUNDLE_REQUEST","emitStatusRequest","id","BUNDLE_STATUS_REQUEST","emitTransactionCancellation","BUNDLE_CANCEL_REQUEST"],"mappings":"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"}
