{"version":3,"file":"sdk-connect.cjs.production.min.js","sources":["../src/connector.ts"],"sourcesContent":["/**\n * @package OpenMevSocket\n * @version 0.4.0\n * @see docs.openmev.org\n */\n\nimport { Socket, io } from 'socket.io-client';\n\nimport { BigNumberish } from '@ethersproject/bignumber';\nimport { getDefaultProvider } from '@ethersproject/providers';\n\n// import { hexDataLength, hexDataSlice, hexlify } from '@ethersproject/bytes'\n// import { defaultAbiCoder } from '@ethersproject/abi';\n/**\n * @configure JSON_RPC_URL is default\n * @configure RPC_URL for failover\n */\nconst defaultOpenMevRpc = 'https://api.sushirelay.com/v1';\nconst JSON_RPC_URL = 'https://api.sushirelay.com/v1';\nconst RPC_URL = process.env.RPC_URL;\nconst tokenKey = `SESSION_TOKEN`;\nexport const defaultServerUrl = 'https://api.sushirelay.com/v1';\n\n\n/**\n * @exports provider\n * @const getDefaultProvider\n * @\n */\nexport const provider = getDefaultProvider(\n  defaultOpenMevRpc || RPC_URL || JSON_RPC_URL,\n);\n\nexport enum Event {\n  FEES_CHANGE = 'FEES_CHANGE',\n  SOCKET_SESSION = 'SOCKET_SESSION',\n  SOCKET_ERR = 'SOCKET_ERR',\n  BUNDLE_REQUEST = 'BUNDLE_REQUEST',\n  OPENMEV_BUNDLE_REQUEST = 'OPENMEV_BUNDLE_REQUEST',\n  BUNDLE_STATUS_REQUEST = 'BUNDLE_STATUS_REQUEST',\n  BUNDLE_RESPONSE = 'BUNDLE_RESPONSE',\n  BUNDLE_CANCEL_REQUEST = 'BUNDLE_CANCEL_REQUEST',\n}\n\nexport interface Fee {\n  maxFeePerGas: BigNumberish;\n  maxPriorityFeePerGas: BigNumberish;\n}\nexport interface Fees {\n  block: number;\n  baseFeePerGas: BigNumberish;\n  default: Fee;\n  low: Fee;\n  med: Fee;\n  high: Fee;\n}\n\nexport enum Status {\n  PENDING_BUNDLE = 'PENDING_BUNDLE',\n  FAILED_BUNDLE = 'FAILED_BUNDLE',\n  SUCCESSFUL_BUNDLE = 'SUCCESSFUL_BUNDLE',\n  REPLACE_BUNDLE_SUCCESSFUL = 'REPLACE_BUNDLE_SUCCESSFUL',\n  BUNDLE_NOT_FOUND = 'BUNDLE_NOT_FOUND',\n}\n\nexport const STATUS_LOCALES: Record<string, string> = {\n  PENDING_BUNDLE: 'Transaction Accepted',\n  FAILED_BUNDLE: 'Failed: Revert',\n  SUCCESSFUL_BUNDLE: 'Success',\n  REPLACE_BUNDLE_SUCCESSFUL: 'Replaced',\n  BUNDLE_NOT_FOUND: 'Failed: Not Found',\n};\n\nexport enum Debug {\n  BLOCKTYPE_FLASHBOTS = 'BLOCKTYPE_FLASHBOTS',\n  BLOCKTYPE_EDENNETWORK = 'BLOCKTYPE_EDENNETWORK',\n  BUNDLE_OUTBID = 'BUNDLE_OUTBID',\n  ERROR_BLOCKHEAD = 'ERROR_BLOCKHEAD',\n  ERROR_BLOCKDATA = 'ERROR_BLOCKDATA',\n  ERROR_UNKNOWN = 'ERROR_UNKNOWN',\n}\n\nexport type ConnectionInfo = {\n  url: string;\n  headers?: { [key: string]: string | number };\n\n  user?: string;\n  password?: string;\n\n  allowInsecureAuthentication?: boolean;\n  allowGzip?: boolean;\n\n  throttleLimit?: number;\n  throttleSlotInterval?: number;\n  throttleCallback?: (attempt: number, url: string) => Promise<boolean>;\n\n  timeout?: number;\n};\n\nexport interface OnceBlockable {\n  once(eventName: 'block', handler: () => void): void;\n}\n\nexport interface OncePollable {\n  once(eventName: 'poll', handler: () => void): void;\n}\n\nexport type PollOptions = {\n  timeout?: number;\n  floor?: number;\n  ceiling?: number;\n  interval?: number;\n  retryLimit?: number;\n  onceBlock?: OnceBlockable;\n  oncePoll?: OncePollable;\n};\n\nexport interface platformVersion {\n  api: number;\n  client: string;\n}\n\nexport interface SocketSession {\n  token: string;\n  version: platformVersion | any;\n}\n\n/**\n * @export\n * @interface TransactionReq\n */\nexport interface TransactionReq {\n  serialized: string;\n  raw: SwapRequest | undefined;\n  estimatedGas?: number;\n  estimatedEffectiveGasPrice?: number;\n}\n/**\n * @export\n * @interface TransactionProcessed\n */\nexport interface TransactionProcessed {\n  serialized: string;\n  bundle: string;\n  raw: SwapRequest | undefined;\n  estimatedGas: number;\n  estimatedEffectiveGasPrice: number;\n}\n/**\n * @export\n * @interface BundleRequest\n */\nexport interface BundleRequest {\n  transactions: TransactionReq[] | string[];\n  chainId?: number;\n  bribe?: string;\n  from?: string;\n  deadline?: BigNumberish;\n  simulateOnly?: boolean;\n}\n\n/**\n *\n * @interface SwapRequest\n * @param {amount0, amount1, path, to}\n */\nexport interface SwapRequest {\n  amount0: BigNumberish;\n  amount1: BigNumberish;\n  path: Array<string>;\n  to: string;\n}\n\n/**\n * @export\n * @interface Backrun\n */\nexport interface Backrun {\n  best: {\n    backrunner: string;\n    count: number;\n    duration: number;\n    totalGasLimit: BigNumberish;\n    totalGasPrice: BigNumberish;\n    totalMaxFeePerGas: BigNumberish;\n    totalMaxPriorityFeePerGas: BigNumberish;\n    transactions: any[];\n  };\n}\n\n/**\n *\n * @interface BundleProcessed\n */\nexport interface BundleProcessed {\n  id: string;\n  transactions: TransactionProcessed[];\n  bribe: BigNumberish;\n  sessionToken: string;\n  chainId: number;\n  timestamp: number;\n  totalEstimatedGas: number;\n  totalEstimatedEffectiveGasPrice: number;\n  from: string;\n  deadline: BigNumberish;\n  simulateOnly: boolean;\n  backrun: Backrun;\n}\n\n/**\n *\n * @interface BundleProcessed\n */\nexport interface BundleResponse {\n  bundle: BundleProcessed;\n  status: string;\n  message: string;\n  error: string;\n}\n\nexport interface BundleResponseApi {\n  bundle: {\n    id: string;\n    transactions: string[];\n  };\n  status: string;\n  message: string;\n  error: string;\n}\n/**\n * @interface QuoteEventsMap\n */\ninterface QuoteEventsMap {\n  [Event.SOCKET_SESSION]: (response: SocketSession) => void;\n  [Event.SOCKET_ERR]: (err: any) => void;\n  [Event.FEES_CHANGE]: (response: Fees) => void;\n  [Event.BUNDLE_REQUEST]: (response: any) => void;\n  [Event.OPENMEV_BUNDLE_REQUEST]: (response: any) => void;\n  [Event.BUNDLE_RESPONSE]: (\n    response: BundleResponse | BundleResponseApi,\n  ) => void;\n  [Event.BUNDLE_CANCEL_REQUEST]: (serialized: any) => void;\n  [Event.BUNDLE_STATUS_REQUEST]: (serialized: any) => void;\n}\n\ninterface SocketOptions {\n  onConnect?: () => void;\n  onConnectError?: (err: any) => void;\n  onDisconnect?: (err: any) => void;\n  onError?: (err: any) => void;\n  onFeesChange?: (fees: Fees) => void;\n  onSocketSession?: (session: any) => void;\n  onTransactionResponse?: (\n    response: BundleResponse | BundleResponseApi,\n  ) => void;\n}\n\nexport class OpenMEVSocket {\n  private socket: Socket<QuoteEventsMap, QuoteEventsMap>;\n\n  constructor(serverUrl: string = defaultServerUrl) {\n    const token = localStorage.getItem(tokenKey);\n    const socket: Socket<QuoteEventsMap, QuoteEventsMap> = io(serverUrl, {\n      transports: ['websocket'],\n      auth: { token },\n      reconnection: true,\n      reconnectionDelay: 5000,\n      autoConnect: true,\n    });\n    this.socket = socket;\n  }\n\n  private disconnect() {\n    this.socket.off('connect');\n    this.socket.off('connect_error');\n    this.socket.off(Event.SOCKET_ERR);\n    this.socket.off(Event.SOCKET_SESSION);\n    this.socket.off(Event.FEES_CHANGE);\n    this.socket.off(Event.BUNDLE_RESPONSE);\n  }\n\n  public closeConnection() {\n    this.socket.disconnect();\n  }\n\n  public init({\n    onConnect,\n    onConnectError,\n    onDisconnect,\n    onError,\n    onFeesChange,\n    onSocketSession,\n    onTransactionResponse,\n  }: SocketOptions): () => void {\n    /**\n     *\n     * @event onConnect\n     *\n     */\n    this.socket.on('connect', () => {\n      if (onConnect) onConnect();\n    });\n\n    /**\n     *\n     * @event onConnectError\n     *\n     */\n    this.socket.on('connect_error', (err: any) => {\n      if (onConnectError) onConnectError(err);\n    });\n\n    /**\n     * @event onDisconnect\n     */\n    this.socket.on('disconnect', (err: any) => {\n      if (onDisconnect) onDisconnect(err);\n    });\n\n    /**\n     * @event onError\n     */\n    this.socket.on(Event.SOCKET_ERR, (err: any) => {\n      if (onError) onError(err);\n    });\n\n    /**\n     * @event onSocketSession\n     * @note Stores the session token in the browser local storage\n     */\n    this.socket.on(Event.SOCKET_SESSION, (session: any) => {\n      localStorage.setItem(tokenKey, session.token);\n      if (onSocketSession) onSocketSession(session);\n    });\n\n    /**\n     * @event onFeesChange\n     */\n    this.socket.on(Event.FEES_CHANGE, (response: Fees) => {\n      if (onFeesChange) onFeesChange(response);\n    });\n\n    /**\n     * @event onTransactionResponse\n     */\n    this.socket.on(\n      Event.BUNDLE_RESPONSE,\n      (response: BundleResponse | BundleResponseApi) => {\n        if (onTransactionResponse) onTransactionResponse(response);\n      },\n    );\n\n    /**\n     * @dev Returns function used to stop listening to all connected socket events.\n     */\n    return () => {\n      this.disconnect();\n    };\n  }\n\n  public emitBundleRequest(bundle: BundleRequest) {\n    this.socket.emit(Event.BUNDLE_REQUEST, bundle);\n  }\n\n  public emitTransactionRequest(bundle: BundleRequest) {\n    this.socket.emit(Event.OPENMEV_BUNDLE_REQUEST, bundle);\n  }\n\n  public emitStatusRequest(id: string) {\n    this.socket.emit(Event.BUNDLE_STATUS_REQUEST, { id });\n  }\n\n  public emitTransactionCancellation(id: string) {\n    this.socket.emit(Event.BUNDLE_CANCEL_REQUEST, { id });\n  }\n}\n\n/*\nexport async function tryGetRevertReason(to: string, from: string, data: string): Promise<string | undefined> {\n  const provider = getDefaultProvider();\n  const tx = { to, from, data };\n  try {\n    await provider.estimateGas(tx);\n  } catch {\n    const value = await provider.call(tx);\n    return hexDataLength(value) % 32 === 4 && hexDataSlice(value, 0, 4) === '0x08c379a0'\n      ? defaultAbiCoder.decode(['string'], hexDataSlice(value, 4))\n      : undefined;\n  }\n  return undefined;\n}\n*/\n\n/** @exports connector */\n"],"names":["Event","Status","Debug","process","serverUrl","token","localStorage","getItem","socket","io","transports","auth","reconnection","reconnectionDelay","autoConnect","disconnect","off","SOCKET_ERR","SOCKET_SESSION","FEES_CHANGE","BUNDLE_RESPONSE","closeConnection","init","onConnect","onConnectError","onDisconnect","onError","onFeesChange","onSocketSession","onTransactionResponse","on","err","session","setItem","response","_this","emitBundleRequest","bundle","emit","BUNDLE_REQUEST","emitTransactionRequest","OPENMEV_BUNDLE_REQUEST","emitStatusRequest","id","BUNDLE_STATUS_REQUEST","emitTransactionCancellation","BUNDLE_CANCEL_REQUEST"],"mappings":"wEAiCYA,EAwBAC,EAgBAC,oEAtDIC,QAchB,SAAYH,GACVA,4BACAA,kCACAA,0BACAA,kCACAA,kDACAA,gDACAA,oCACAA,gDARF,CAAYA,IAAAA,OAwBZ,SAAYC,GACVA,kCACAA,gCACAA,wCACAA,wDACAA,sCALF,CAAYA,IAAAA,OAgBZ,SAAYC,GACVA,4CACAA,gDACAA,gCACAA,oCACAA,oCACAA,gCANF,CAAYA,IAAAA,6CA2LEE,YAAAA,IAAAA,EA/OkB,qCAgPtBC,EAAQC,aAAaC,yBACrBC,EAAiDC,KAAGL,EAAW,CACnEM,WAAY,CAAC,aACbC,KAAM,CAAEN,MAAAA,GACRO,cAAc,EACdC,kBAAmB,IACnBC,aAAa,SAEVN,OAASA,6BAGRO,WAAA,gBACDP,OAAOQ,IAAI,gBACXR,OAAOQ,IAAI,sBACXR,OAAOQ,IAAIhB,EAAMiB,iBACjBT,OAAOQ,IAAIhB,EAAMkB,qBACjBV,OAAOQ,IAAIhB,EAAMmB,kBACjBX,OAAOQ,IAAIhB,EAAMoB,oBAGjBC,gBAAA,gBACAb,OAAOO,gBAGPO,KAAA,uBACLC,IAAAA,UACAC,IAAAA,eACAC,IAAAA,aACAC,IAAAA,QACAC,IAAAA,aACAC,IAAAA,gBACAC,IAAAA,kCAOKrB,OAAOsB,GAAG,WAAW,WACpBP,GAAWA,YAQZf,OAAOsB,GAAG,iBAAiB,SAACC,GAC3BP,GAAgBA,EAAeO,WAMhCvB,OAAOsB,GAAG,cAAc,SAACC,GACxBN,GAAcA,EAAaM,WAM5BvB,OAAOsB,GAAG9B,EAAMiB,YAAY,SAACc,GAC5BL,GAASA,EAAQK,WAOlBvB,OAAOsB,GAAG9B,EAAMkB,gBAAgB,SAACc,GACpC1B,aAAa2B,wBAAkBD,EAAQ3B,OACnCuB,GAAiBA,EAAgBI,WAMlCxB,OAAOsB,GAAG9B,EAAMmB,aAAa,SAACe,GAC7BP,GAAcA,EAAaO,WAM5B1B,OAAOsB,GACV9B,EAAMoB,iBACN,SAACc,GACKL,GAAuBA,EAAsBK,MAO9C,WACLC,EAAKpB,iBAIFqB,kBAAA,SAAkBC,QAClB7B,OAAO8B,KAAKtC,EAAMuC,eAAgBF,MAGlCG,uBAAA,SAAuBH,QACvB7B,OAAO8B,KAAKtC,EAAMyC,uBAAwBJ,MAG1CK,kBAAA,SAAkBC,QAClBnC,OAAO8B,KAAKtC,EAAM4C,sBAAuB,CAAED,GAAAA,OAG3CE,4BAAA,SAA4BF,QAC5BnC,OAAO8B,KAAKtC,EAAM8C,sBAAuB,CAAEH,GAAAA"}