{
  "info": {
    "_postman_id": "2218bc61-1b7e-41af-824c-287c283f3548",
    "name": "OpenMEV",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "ETH",
      "item": [
        {
          "name": "eth_accounts",
          "id": "9749ebbe-e0f9-4475-bec0-5db839a34763",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_accounts\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns a list of account addresses a client owns.\n\n> **note**\n> \n> This method returns an empty object because Besu [doesn't support key management](https://besu.hyperledger.org/en/stable/HowTo/Send-Transactions/Account-Management) inside the client.\n> \n> To provide access to your key store and and then sign transactions, use [EthSigner](http://docs.ethsigner.consensys.net/en/latest/) with Besu.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`Array of data` : List of 20-byte account addresses owned by the client.\n"
          },
          "response": [
            {
              "id": "0e148c08-9489-418d-8d47-fe9a3281e863",
              "name": "eth_accounts",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_accounts\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": []\n}"
            }
          ]
        },
        {
          "name": "eth_blockNumber",
          "id": "7954beaf-74e2-418f-9025-4a44c979c9ed",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_blockNumber\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns the index corresponding to the block number of the current chain head.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : *QUANTITY* - Hexadecimal integer representing the index corresponding to the block\nnumber of the current chain head.\n"
          },
          "response": [
            {
              "id": "27493bcb-ac40-4563-b672-913ab85ba7fd",
              "name": "eth_blockNumber",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_blockNumber\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 51,\n    \"result\": \"0x2377\"\n}"
            }
          ]
        },
        {
          "name": "eth_call",
          "id": "8f2a8f1c-83cf-4120-ba29-4cac1f055c9a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_call\",\n    \"params\": [\n        {\n            \"to\": \"0x69498dd54bd25aa0c886cf1f8b8ae0856d55ff13\",\n            \"value\": \"0x1\"\n        },\n        \"latest\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Invokes a contract function locally and does not change the state of the blockchain.\n\nYou can interact with contracts using `eth_sendRawTransaction` or `eth_call`.\n\nIf revert reason is enabled with [`--revert-reason-enabled`](https://besu.hyperledger.org/en/latest/Reference/CLI/CLI-Syntax/#revert-reason-enabled),\nthe `eth_call` error response will include the [revert reason](https://besu.hyperledger.org/en/latest/HowTo/Send-Transactions/Revert-Reason/).\n\n#### Parameters\n\n*OBJECT* - [Transaction call object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#transaction-call-object).\n\n*QUANTITY|TAG* - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n> **note**\n> \n> By default, `eth_call` does not fail if the sender account has an insufficient balance. This is done by setting the balance of the account to a large amount of ether. To enforce balance rules, set the [`strict` parameter](https://besu.hyperledger.org/en/latest/Reference/API-Objects/#transaction-call-object) in the transaction call object to `true`.\n\n#### Returns\n\n`result` - `data` - Return value of the executed contract."
          },
          "response": [
            {
              "id": "43dd7d71-e966-4674-8c33-5b695cc9c6bb",
              "name": "eth_call success",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_call\",\n    \"params\": [\n        {\n            \"to\": \"0x69498dd54bd25aa0c886cf1f8b8ae0856d55ff13\",\n            \"value\": \"0x1\"\n        },\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": \"0x\"\n}"
            },
            {
              "id": "982c57b4-d813-49b7-8d2d-53f622a742a6",
              "name": "eth_call error",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_estimateGas\",\n    \"params\": [\n        {\n            \"from\": \"0x687422eea2cb73b5d3e242ba5456b782919afc85\",\n            \"to\": \"0xdd37f65db31c107f773e82a4f85c693058fef7a9\",\n            \"value\": \"0x1\"\n        },\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"error\": {\n    \"code\": -32000,\n    \"message\": \"Execution reverted\",\n    \"data\": \"0x08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001a4e6f7420656e6f7567682045746865722070726f76696465642e000000000000\"\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_chainId",
          "id": "68176c8a-cfce-42aa-8fca-6b64e3fc9264",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_chainId\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns the [chain ID](https://besu.hyperledger.org/en/stable/Concepts/NetworkID-And-ChainID).\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : *quantity* - Chain ID, in hexadecimal."
          },
          "response": [
            {
              "id": "47483fb0-fdc2-43d2-baf4-72df28e71128",
              "name": "eth_chainId",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_chainId\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 51,\n    \"result\": \"0x7e2\"\n}"
            }
          ]
        },
        {
          "name": "eth_coinbase",
          "id": "df56b65a-612a-4053-9f0b-eb10a7a6876b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_coinbase\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns the client coinbase address. The coinbase address is the account to pay mining rewards to.\n\nTo set a coinbase address, start Besu with the `--miner-coinbase` option set to a valid Ethereum\naccount address. You can get the Ethereum account address from a client such as MetaMask or\nEtherscan. For example:\n\n**Example**\n\n```bash\nbesu --miner-coinbase=\"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\" --rpc-http-enabled\n```\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : *data* - Coinbase address."
          },
          "response": [
            {
              "id": "3bf513f8-e0a2-4ae1-8b6c-769b44a79dc3",
              "name": "eth_coinbase",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_coinbase\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\"\n}"
            }
          ]
        },
        {
          "name": "eth_estimateGas",
          "id": "e7575ca8-de66-4c16-a2e6-c9620e77713c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_estimateGas\",\n    \"params\": [\n        {\n            \"from\": \"0x687422eea2cb73b5d3e242ba5456b782919afc85\",\n            \"to\": \"0xdd37f65db31c107f773e82a4f85c693058fef7a9\",\n            \"value\": \"0x1\"\n        },\n        \"latest\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns an estimate of the gas required for a transaction to complete. The estimation process\ndoes not use gas and the transaction is not added to the blockchain. The resulting estimate can be\ngreater than the amount of gas the transaction ends up using, for reasons including EVM mechanics\nand node performance.\n\nThe `eth_estimateGas` call does not send a transaction. You must call\n[`eth_sendRawTransaction`](#eth_sendrawtransaction) to execute the transaction.\n\nIf revert reason is enabled with [`--revert-reason-enabled`](https://besu.hyperledger.org/en/latest/Reference/CLI/CLI-Syntax/#revert-reason-enabled),\nthe `eth_estimateGas` error response will include the [revert reason](https://besu.hyperledger.org/en/latest/HowTo/Send-Transactions/Revert-Reason/).\n\n#### Parameters\n\nThe transaction call object parameters are the same as those for [`eth_call`](#eth_call) except for the\n[`strict` parameter](https://besu.hyperledger.org/en/stable/Reference/API-Objects#transaction-call-object). If `strict` is set to `true`, the sender\naccount balance is checked for value transfer and transaction fees. The default for `strict` is `false`.\n\nFor `eth_estimateGas`, all fields are optional because setting a gas limit\nis irrelevant to the estimation process (unlike transactions, in which gas limits apply).\n\n`object` - [Transaction call object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#transaction-call-object).\n\n#### Returns\n\n`result` : `quantity` -  Amount of gas used."
          },
          "response": [
            {
              "id": "bf949d18-29e5-41fa-87c6-d32670c89418",
              "name": "eth_estimateGas success",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_estimateGas\",\n    \"params\": [\n        {\n            \"from\": \"0x687422eea2cb73b5d3e242ba5456b782919afc85\",\n            \"to\": \"0xdd37f65db31c107f773e82a4f85c693058fef7a9\",\n            \"value\": \"0x1\"\n        },\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": \"0x5208\"\n}"
            },
            {
              "id": "5c88cff6-66cc-4ee2-bb1e-eae7e9d2ab7f",
              "name": "eth_estimateGas error",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_estimateGas\",\n    \"params\": [\n        {\n            \"from\": \"0x687422eea2cb73b5d3e242ba5456b782919afc85\",\n            \"to\": \"0xdd37f65db31c107f773e82a4f85c693058fef7a9\",\n            \"value\": \"0x1\"\n        },\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 3,\n    \"error\": {\n    \"code\": -32000,\n    \"message\": \"Execution reverted\",\n    \"data\": \"0x08c379a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001a4e6f7420656e6f7567682045746865722070726f76696465642e000000000000\"\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_gasPrice",
          "id": "6e8d7b5d-de7b-4c9c-97db-e664824d6731",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_gasPrice\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns a percentile gas unit price for the most recent blocks, in Wei. By default,\nthe last 100 blocks are examined and the 50th percentile gas unit price (that is, the median value)\nis returned.\n\nIf there are no blocks, the value for [`--min-gas-price`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#min-gas-price) is returned.\nThe value returned is restricted to values between [`--min-gas-price`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#min-gas-price)\nand [`--api-gas-price-max`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#api-gas-price-max). By default, 1000 Wei and\n500GWei.\n\nUse the [`--api-gas-price-blocks`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#api-gas-price-blocks), [`--api-gas-price-percentile`](CLI/CLI-Syntax#api-gas-price-percentile)\n, and [`--api-gas-price-max`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#api-gas-price-max) command line\noptions to configure the `eth_gasPrice` default values.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : `quantity` - Percentile gas unit price for the most recent blocks, in Wei, as a hexadecimal value."
          },
          "response": [
            {
              "id": "6b851d2b-5cad-41c9-8518-6c17b8c22149",
              "name": "eth_gasPrice",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_gasPrice\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": \"0x3e8\"\n}"
            }
          ]
        },
        {
          "name": "eth_getBalance",
          "id": "15b45e56-338b-4338-a729-389b7ac9624b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBalance\",\n    \"params\": [\n        \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\n        \"latest\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns the account balance of the specified address.\n\n#### Parameters\n\n`DATA` - 20-byte account address from which to retrieve the balance.\n\n`QUANTITY|TAG` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result` : *QUANTITY* - Current balance, in wei, as a hexadecimal value."
          },
          "response": [
            {
              "id": "750103a4-bd27-4201-9a29-eb079a064c25",
              "name": "eth_getBalance",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBalance\",\n    \"params\": [\n        \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": \"0x1cfe56f3795885980000\"\n}"
            }
          ]
        },
        {
          "name": "eth_getBlockByHash",
          "id": "8461f75c-47dd-47d3-9591-8566feaac5d9",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBlockByHash\",\n    \"params\": [\n        \"0xaf5526fcb88b2f0d163c9a78ee678bf95b20115dc3d4e2b7b1f5fc4a308724a0\",\n        false\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns information about the block by hash.\n\n#### Parameters\n\n`DATA` - 32-byte hash of a block.\n\n`Boolean` - If `true`, returns the full [transaction objects](https://besu.hyperledger.org/en/stable/Reference/API-Objects#transaction-object);\nif `false`, returns the transaction hashes.\n\n#### Returns\n\n`result` : *OBJECT* - [Block object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#block-object) , or `null` when there is no block."
          },
          "response": [
            {
              "id": "418d683a-ec30-4a89-8c13-075dabf42d6a",
              "name": "eth_getBlockByHash",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBlockByHash\",\n    \"params\": [\n        \"0xaf5526fcb88b2f0d163c9a78ee678bf95b20115dc3d4e2b7b1f5fc4a308724a0\",\n        false\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": {\n        \"number\": \"0x68b3\",\n        \"hash\": \"0xd5f1812548be429cbdc6376b29611fc49e06f1359758c4ceaaa3b393e2239f9c\",\n        \"mixHash\": \"0x24900fb3da77674a861c428429dce0762707ecb6052325bbd9b3c64e74b5af9d\",\n        \"parentHash\": \"0x1f68ac259155e2f38211ddad0f0a15394d55417b185a93923e2abe71bb7a4d6d\",\n        \"nonce\": \"0x378da40ff335b070\",\n        \"sha3Uncles\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\n        \"logsBloom\": \"0xn        \"transactionsRoot\": \"0x4d0c8e91e16bdff538c03211c5c73632ed054d00a7e210c0eb25146c20048126\",\n        \"stateRoot\": \"0x91309efa7e42c1f137f31fe9edbe88ae087e6620d0d59031324da3e2f4f93233\",\n        \"receiptsRoot\": \"0x68461ab700003503a305083630a8fb8d14927238f0bc8b6b3d246c0c64f21f4a\",\n        \"miner\": \"0xb42b6c4a95406c78ff892d270ad20b22642e102d\",\n        \"difficulty\": \"0x66e619a\",\n        \"totalDifficulty\": \"0x1e875d746ae\",\n        \"extraData\": \"0xd583010502846765746885676f312e37856c696e7578\",\n        \"size\": \"0x334\",\n        \"gasLimit\": \"0x47e7c4\",\n        \"gasUsed\": \"0x37993\",\n        \"timestamp\": \"0x5835c54d\",\n        \"uncles\": [],\n        \"transactions\": [\n            \"0xa0807e117a8dd124ab949f460f08c36c72b710188f01609595223b325e58e0fc\",\n            \"0xeae6d797af50cb62a596ec3939114d63967c374fa57de9bc0f4e2b576ed6639d\"\n        ]\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getBlockByNumber",
          "id": "bd3ab24a-92bb-4bb5-91d2-706161cfa28e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBlockByNumber\",\n    \"params\": [\n        \"0xF\",\n        true\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns information about a block by block number.\n\n#### Parameters\n\n`QUANTITY|TAG` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n`Boolean` - If `true`, returns the full [transaction objects](https://besu.hyperledger.org/en/stable/Reference/API-Objects#transaction-object);\nif `false`, returns only the hashes of the transactions.\n\n#### Returns\n\n`result` : *OBJECT* - [Block object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#block-object) , or `null` when there is no\nblock."
          },
          "response": [
            {
              "id": "af409f24-7cb8-4bfb-8f3c-b993808068ee",
              "name": "eth_getBlockByNumber",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBlockByNumber\",\n    \"params\": [\n        \"0xF\",\n        true\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"number\": \"0x68b3\",\n        \"hash\": \"0xd5f1812548be429cbdc6376b29611fc49e06f1359758c4ceaaa3b393e2239f9c\",\n        \"mixHash\": \"0x24900fb3da77674a861c428429dce0762707ecb6052325bbd9b3c64e74b5af9d\",\n        \"parentHash\": \"0x1f68ac259155e2f38211ddad0f0a15394d55417b185a93923e2abe71bb7a4d6d\",\n        \"nonce\": \"0x378da40ff335b070\",\n        \"sha3Uncles\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\n        \"logsBloom\": \"0xn        \"transactionsRoot\": \"0x4d0c8e91e16bdff538c03211c5c73632ed054d00a7e210c0eb25146c20048126\",\n        \"stateRoot\": \"0x91309efa7e42c1f137f31fe9edbe88ae087e6620d0d59031324da3e2f4f93233\",\n        \"receiptsRoot\": \"0x68461ab700003503a305083630a8fb8d14927238f0bc8b6b3d246c0c64f21f4a\",\n        \"miner\": \"0xb42b6c4a95406c78ff892d270ad20b22642e102d\",\n        \"difficulty\": \"0x66e619a\",\n        \"totalDifficulty\": \"0x1e875d746ae\",\n        \"extraData\": \"0xd583010502846765746885676f312e37856c696e7578\",\n        \"size\": \"0x334\",\n        \"gasLimit\": \"0x47e7c4\",\n        \"gasUsed\": \"0x37993\",\n        \"timestamp\": \"0x5835c54d\",\n        \"uncles\": [],\n        \"transactions\": []\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getBlockTransactionCountByHash",
          "id": "e893e888-aa67-4d11-a3ff-3d6019a741ea",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBlockTransactionCountByHash\",\n    \"params\": [\n        \"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns the number of transactions in the block matching the given block hash.\n\n#### Parameters\n\n`data` - 32-byte block hash.\n\n#### Returns\n\n`result` : `quantity` - Integer representing the number of transactions in the specified block."
          },
          "response": [
            {
              "id": "3b52f8b9-1b46-409f-bc2f-69300a4fa9ac",
              "name": "eth_getBlockTransactionCountByHash",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBlockTransactionCountByHash\",\n    \"params\": [\n        \"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x1\"\n}"
            }
          ]
        },
        {
          "name": "eth_getBlockTransactionCountByNumber",
          "id": "92e2aaa7-ac60-44e7-bc01-e3710f8ae996",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBlockTransactionCountByNumber\",\n    \"params\": [\n        \"0xe8\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns the number of transactions in a block matching the specified block number.\n\n#### Parameters\n\n`QUANTITY|TAG` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result` : *QUANTITY* - Integer representing the number of transactions in the specified block."
          },
          "response": [
            {
              "id": "953a4c56-10a5-419d-8eca-c6a79fce9b43",
              "name": "eth_getBlockTransactionCountByNumber",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getBlockTransactionCountByNumber\",\n    \"params\": [\n        \"0xe8\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 51,\n    \"result\": \"0x8\"\n}"
            }
          ]
        },
        {
          "name": "eth_getCode",
          "id": "53acbc1e-bfd7-48fb-9a11-44db3ecf6cd1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getCode\",\n    \"params\": [\n        \"0xa50a51c09a5c451c52bb714527e1974b686d8e77\",\n        \"latest\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns the code of the smart contract at the specified address. Besu stores compiled smart\ncontract code as a hexadecimal value.\n\n#### Parameters\n\n`DATA` - 20-byte contract address.\n\n`QUANTITY|TAG` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result` : *DATA* - Code stored at the specified address."
          },
          "response": [
            {
              "id": "1484c10a-5661-40ae-8c2e-71e516f21172",
              "name": "eth_getCode",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getCode\",\n    \"params\": [\n        \"0xa50a51c09a5c451c52bb714527e1974b686d8e77\",\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": \"0x60806040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633fa4f2458114604d57806355241077146071575b600080fd5b348015605857600080fd5b50605f6088565b60408051918252519081900360200190f35b348015607c57600080fd5b506086600435608e565b005b60005481565b60008190556040805182815290517f199cd93e851e4c78c437891155e2112093f8f15394aa89dab09e38d6ca0727879181900360200190a1505600a165627a7a723058209d8929142720a69bde2ab3bfa2da6217674b984899b62753979743c0470a2ea70029\"\n}"
            }
          ]
        },
        {
          "name": "eth_getFilterChanges",
          "id": "8a19a75d-0ae3-47e7-b4a3-cebdb6ad3bc1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getFilterChanges\",\n    \"params\": [\n        \"0xf8bf5598d9e04fbe84523d42640b9b0e\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Polls the specified filter and returns an array of changes that have occurred since the last poll.\n\n#### Parameters\n\n`data` - Filter ID.\n\n#### Returns\n\n`result` : `Array of Object` - If nothing changed since the last poll, an empty list. Otherwise:\n\n* For filters created with `eth_newBlockFilter`, returns block hashes.\n* For filters created with `eth_newPendingTransactionFilter`, returns transaction hashes.\n* For filters created with `eth_newFilter`, returns [log objects](https://besu.hyperledger.org/en/stable/Reference/API-Objects#log-object)."
          },
          "response": [
            {
              "id": "8d608517-0281-4bde-9292-f6f589e98228",
              "name": "Filter created with eth_newBlockFilter",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getFilterChanges\",\n    \"params\": [\n        \"0xf8bf5598d9e04fbe84523d42640b9b0e\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        \"0xda2bfe44bf85394f0d6aa702b5af89ae50ae22c0928c18b8903d9269abe17e0b\",\n        \"0x88cd3a37306db1306f01f7a0e5b25a9df52719ad2f87b0f88ee0e6753ed4a812\",\n        \"0x4d4c731fe129ff32b425e6060d433d3fde278b565bbd1fd624d5a804a34f8786\"\n    ]\n}"
            },
            {
              "id": "4188b81c-0362-4699-a83a-fb4fd8eb5631",
              "name": "filter created with eth_newPendingTransactionFilter",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getFilterChanges\",\n    \"params\": [\n        \"0xf8bf5598d9e04fbe84523d42640b9b0e\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        \"0x1e977049b6db09362da09491bee3949d9362080ce3f4fc19721196d508580d46\",\n        \"0xa3abc4b9a4e497fd58dc59cdff52e9bb5609136bcd499e760798aa92802769be\"\n    ]\n}"
            },
            {
              "id": "cece46ce-c207-4a1e-a1fa-9f7feec32501",
              "name": "Filter created with eth_newFilter",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getFilterChanges\",\n    \"params\": [\n        \"0xf8bf5598d9e04fbe84523d42640b9b0e\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"logIndex\": \"0x0\",\n            \"removed\": false,\n            \"blockNumber\": \"0x233\",\n            \"blockHash\": \"0xfc139f5e2edee9e9c888d8df9a2d2226133a9bd87c88ccbd9c930d3d4c9f9ef5\",\n            \"transactionHash\": \"0x66e7a140c8fa27fe98fde923defea7562c3ca2d6bb89798aabec65782c08f63d\",\n            \"transactionIndex\": \"0x0\",\n            \"address\": \"0x42699a7612a82f1d9c36148af9c77354759b210b\",\n            \"data\": \"0x0000000000000000000000000000000000000000000000000000000000000004\",\n            \"topics\": [\n                \"0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3\"\n            ]\n        },\n        {\n            \"logIndex\": \"0x0\",\n            \"removed\": false,\n            \"blockNumber\": \"0x238\",\n            \"blockHash\": \"0x98b0ec0f9fea0018a644959accbe69cd046a8582e89402e1ab0ada91cad644ed\",\n            \"transactionHash\": \"0xdb17aa1c2ce609132f599155d384c0bc5334c988a6c368056d7e167e23eee058\",\n            \"transactionIndex\": \"0x0\",\n            \"address\": \"0x42699a7612a82f1d9c36148af9c77354759b210b\",\n            \"data\": \"0x0000000000000000000000000000000000000000000000000000000000000007\",\n            \"topics\": [\n                \"0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3\"\n            ]\n        }\n    ]\n}"
            }
          ]
        },
        {
          "name": "eth_getFilterLogs",
          "id": "0cb21d00-1ebd-4284-884b-45cb8294e2d8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getFilterLogs\",\n    \"params\": [\n        \"0x5ace5de3985749b6a1b2b0d3f3e1fb69\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns an array of [logs](https://besu.hyperledger.org/en/stable/Concepts/Events-and-Logs) for the specified filter.\n\nLeave the [`--auto-log-bloom-caching-enabled`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#auto-log-bloom-caching-enabled)\ncommand line option at the default value of `true` to improve log retrieval performance.\n\n> **note**\n\n    `eth_getFilterLogs` is only used for filters created with `eth_newFilter`. To specify a filter\n    object and get logs without creating a filter, use `eth_getLogs` .\n\n#### Parameters\n\n`data` - Filter ID.\n\n#### Returns\n\n`array` - [Log objects](https://besu.hyperledger.org/en/stable/Reference/API-Objects#log-object)."
          },
          "response": [
            {
              "id": "c8697a36-6b5a-4ae8-b612-e0dd1ffdae9f",
              "name": "eth_getFilterLogs",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getFilterLogs\",\n    \"params\": [\n        \"0x5ace5de3985749b6a1b2b0d3f3e1fb69\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"logIndex\": \"0x0\",\n            \"removed\": false,\n            \"blockNumber\": \"0xb3\",\n            \"blockHash\": \"0xe7cd776bfee2fad031d9cc1c463ef947654a031750b56fed3d5732bee9c61998\",\n            \"transactionHash\": \"0xff36c03c0fba8ac4204e4b975a6632c862a3f08aa01b004f570cc59679ed4689\",\n            \"transactionIndex\": \"0x0\",\n            \"address\": \"0x2e1f232a9439c3d459fceca0beef13acc8259dd8\",\n            \"data\": \"0x0000000000000000000000000000000000000000000000000000000000000003\",\n            \"topics\": [\n                \"0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3\"\n            ]\n        },\n        {\n            \"logIndex\": \"0x0\",\n            \"removed\": false,\n            \"blockNumber\": \"0xb6\",\n            \"blockHash\": \"0x3f4cf35e7ed2667b0ef458cf9e0acd00269a4bc394bb78ee07733d7d7dc87afc\",\n            \"transactionHash\": \"0x117a31d0dbcd3e2b9180c40aca476586a648bc400aa2f6039afdd0feab474399\",\n            \"transactionIndex\": \"0x0\",\n            \"address\": \"0x2e1f232a9439c3d459fceca0beef13acc8259dd8\",\n            \"data\": \"0x0000000000000000000000000000000000000000000000000000000000000005\",\n            \"topics\": [\n                \"0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3\"\n            ]\n        }\n    ]\n}"
            }
          ]
        },
        {
          "name": "eth_getLogs",
          "id": "3edc2e56-4b07-4ab7-93a4-4028f712a1a7",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getLogs\",\n    \"params\": [\n        {\n            \"fromBlock\": \"earliest\",\n            \"toBlock\": \"latest\",\n            \"address\": \"0x2e1f232a9439c3d459fceca0beef13acc8259dd8\",\n            \"topics\": []\n        }\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns an array of [logs](https://besu.hyperledger.org/en/stable/Concepts/Events-and-Logs) matching a specified filter object.\n\nLeave the [`--auto-log-bloom-caching-enabled`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#auto-log-bloom-caching-enabled)\ncommand line option at the default value of `true` to improve log retrieval performance.\n\n> **Attention**\n>\n> Using `eth_getLogs` to get the logs from a large range of blocks, especially an entire chain from its genesis block, can cause Besu to hang and never return a response. We recommend splitting one large query into multiple ones for better performance.\n\n#### Parameters\n\n`Object` - [Filter options object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#filter-options-object).\n\n#### Returns\n\n`array` - [Log objects](https://besu.hyperledger.org/en/stable/Reference/API-Objects#log-object)."
          },
          "response": [
            {
              "id": "83a832a1-f6f6-446b-adc1-e1fddf318792",
              "name": "eth_getLogs",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getLogs\",\n    \"params\": [\n        {\n            \"fromBlock\": \"earliest\",\n            \"toBlock\": \"latest\",\n            \"address\": \"0x2e1f232a9439c3d459fceca0beef13acc8259dd8\",\n            \"topics\": []\n        }\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        {\n            \"logIndex\": \"0x0\",\n            \"removed\": false,\n            \"blockNumber\": \"0xb3\",\n            \"blockHash\": \"0xe7cd776bfee2fad031d9cc1c463ef947654a031750b56fed3d5732bee9c61998\",\n            \"transactionHash\": \"0xff36c03c0fba8ac4204e4b975a6632c862a3f08aa01b004f570cc59679ed4689\",\n            \"transactionIndex\": \"0x0\",\n            \"address\": \"0x2e1f232a9439c3d459fceca0beef13acc8259dd8\",\n            \"data\": \"0x0000000000000000000000000000000000000000000000000000000000000003\",\n            \"topics\": [\n                \"0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3\"\n            ]\n        },\n        {\n            \"logIndex\": \"0x0\",\n            \"removed\": false,\n            \"blockNumber\": \"0xb6\",\n            \"blockHash\": \"0x3f4cf35e7ed2667b0ef458cf9e0acd00269a4bc394bb78ee07733d7d7dc87afc\",\n            \"transactionHash\": \"0x117a31d0dbcd3e2b9180c40aca476586a648bc400aa2f6039afdd0feab474399\",\n            \"transactionIndex\": \"0x0\",\n            \"address\": \"0x2e1f232a9439c3d459fceca0beef13acc8259dd8\",\n            \"data\": \"0x0000000000000000000000000000000000000000000000000000000000000005\",\n            \"topics\": [\n                \"0x04474795f5b996ff80cb47c148d4c5ccdbe09ef27551820caa9c2f8ed149cce3\"\n            ]\n        }\n    ]\n}"
            }
          ]
        },
        {
          "name": "eth_getMinerDataByBlockHash",
          "id": "a3d0d65a-5f72-4a80-bf38-843ffee3b6f7",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getMinerDataByBlockHash\",\n    \"params\": [\n        \"0xbf137c3a7a1ebdfac21252765e5d7f40d115c2757e4a4abee929be88c624fdb7\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns miner data for the specified block.\n\n#### Parameters\n\n`data` - 32 byte block hash.\n\n#### Returns\n\n`result`: `object` - [Miner data](https://besu.hyperledger.org/en/stable/Reference/API-Objects#miner-data-object)."
          },
          "response": [
            {
              "id": "31d79b06-ca5d-40ff-87b9-aca7f7caa492",
              "name": "eth_getMinerDataByBlockHash",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getMinerDataByBlockHash\",\n    \"params\": [\n        \"0xbf137c3a7a1ebdfac21252765e5d7f40d115c2757e4a4abee929be88c624fdb7\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"netBlockReward\": \"0x47c6f3739f3da800\",\n        \"staticBlockReward\": \"0x4563918244f40000\",\n        \"transactionFee\": \"0x38456548220800\",\n        \"uncleInclusionReward\": \"0x22b1c8c1227a000\",\n        \"uncleRewards\": [\n            {\n                \"hash\": \"0x2422d43b4f72e19faf4368949a804494f67559405046b39c6d45b1bd53044974\",\n                \"coinbase\": \"0x0c062b329265c965deef1eede55183b3acb8f611\"\n            }\n        ],\n        \"coinbase\": \"0xb42b6c4a95406c78ff892d270ad20b22642e102d\",\n        \"extraData\": \"0xd583010502846765746885676f312e37856c696e7578\",\n        \"difficulty\": \"0x7348c20\",\n        \"totalDifficulty\": \"0xa57bcfdd96\"\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getMinerDataByBlockNumber",
          "id": "74324683-5729-4f9f-8a84-a91752ed7e63",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getMinerDataByBlockNumber\",\n    \"params\": [\n        \"0x7689D2\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns miner data for the specified block.\n\n#### Parameters\n\n`quantity|tag` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result`: `object` - [Miner data](https://besu.hyperledger.org/en/stable/Reference/API-Objects#miner-data-object)."
          },
          "response": [
            {
              "id": "ecc8815b-27ce-41ba-9c6a-0b205341ac96",
              "name": "eth_getMinerDataByBlockNumber",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getMinerDataByBlockHash\",\n    \"params\": [\n        \"0xbf137c3a7a1ebdfac21252765e5d7f40d115c2757e4a4abee929be88c624fdb7\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"netBlockReward\": \"0x47c6f3739f3da800\",\n        \"staticBlockReward\": \"0x4563918244f40000\",\n        \"transactionFee\": \"0x38456548220800\",\n        \"uncleInclusionReward\": \"0x22b1c8c1227a000\",\n        \"uncleRewards\": [\n            {\n                \"hash\": \"0x2422d43b4f72e19faf4368949a804494f67559405046b39c6d45b1bd53044974\",\n                \"coinbase\": \"0x0c062b329265c965deef1eede55183b3acb8f611\"\n            }\n        ],\n        \"coinbase\": \"0xb42b6c4a95406c78ff892d270ad20b22642e102d\",\n        \"extraData\": \"0xd583010502846765746885676f312e37856c696e7578\",\n        \"difficulty\": \"0x7348c20\",\n        \"totalDifficulty\": \"0xa57bcfdd96\"\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getProof",
          "id": "5d6edab7-eaaa-4e99-add8-8e875d53144d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getProof\",\n    \"params\": [\n        \"0a8156e7ee392d885d10eaa86afd0e323afdcd95\",\n        [\n            \"0x0000000000000000000000000000000000000000000000000000000000000347\"\n        ],\n        \"latest\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns the account and storage values of the specified account, including the Merkle proof.\n\nThe API allows IoT devices or mobile apps which are unable to run light clients to verify responses\nfrom untrusted sources, by using a trusted block hash.\n\n#### Parameters\n\n`DATA` - 20-byte address of the account or contract.\n\n`ARRAY` - Array of 32-byte storage keys to generate proofs for.\n\n`QUANTITY|TAG` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result`: *Object* - Account details:\n\n* `balance`:`Quantity` - Account balance.\n* `codeHash`:`Data, 32-byte` - Hash of the account code.\n* `nonce`:`Quantity` - Number of transactions sent from the account.\n* `storageHash`:`Data, 32-byte` - SHA3 of the `storageRoot`.\n* `accountProof`:`Array` - RLP-encoded Merkle tree nodes, starting with the `stateRoot`.\n* `storageProof`:`Array`- Storage entries. Each entry is an object that displays:\n    * `key`:`Quantity` - Storage key.\n    * `value`:`Quantity` - Storage value.\n    * `proof`:`Array` - RLP-encoded Merkle tree nodes, starting with the `storageHash`."
          },
          "response": [
            {
              "id": "c9837d06-c9aa-47ee-888f-b749bce9f016",
              "name": "eth_getProof",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getProof\",\n    \"params\": [\n        \"0a8156e7ee392d885d10eaa86afd0e323afdcd95\",\n        [\n            \"0x0000000000000000000000000000000000000000000000000000000000000347\"\n        ],\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"accountProof\": [\n            \"0xf90211a0...608d898380\",\n            \"0xf90211a0...ec33f19580\",\n            \"0xf901d1a0...9e55584480\",\n            \"0xf8718080...18e5777142\"\n        ],\n        \"address\": \"0x0a8156e7ee392d885d10eaa86afd0e323afdcd95\",\n        \"balance\": \"0x0\",\n        \"codeHash\": \"0x2b6975dcaf69f9bb9a3b30bb6a37b305ce440250bf0dd2f23338cb18e5777142\",\n        \"nonce\": \"0x5f\",\n        \"storageHash\": \"0x917688de43091589aa58c1dfd315105bc9de4478b9ba7471616a4d8a43d46203\",\n        \"storageProof\": [\n            {\n                \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000347\",\n                \"value\": \"0x0\",\n                \"proof\": [\n                    \"0xf90211a0...5176779280\",\n                    \"0xf901f1a0...c208d86580\",\n                    \"0xf8d180a0...1ce6808080\"\n                ]\n            }\n        ]\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getStorageAt",
          "id": "388f7248-f2b4-4685-aa62-6d1049a372e3",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getStorageAt\",\n    \"params\": [\n        \"0x3B3F3E\",\n        \"0x0\",\n        \"latest\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns the value of a storage position at a specified address.\n\n#### Parameters\n\n`DATA` - A 20-byte storage address.\n\n`QUANTITY` - Integer index of the storage position.\n\n`QUANTITY|TAG` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result` : *DATA* - The value at the specified storage position."
          },
          "response": [
            {
              "id": "afc89857-b7a2-438e-8e27-837827709ff9",
              "name": "eth_getStorageAt",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getStorageAt\",\n    \"params\": [\n        \"0x3B3F3E\",\n        \"0x0\",\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n}"
            }
          ]
        },
        {
          "name": "eth_getTransactionByBlockHashAndIndex",
          "id": "e05d65fd-c940-4acd-8b48-3483fd8fe440",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionByBlockHashAndIndex\",\n    \"params\": [\n        \"0xa52be92809541220ee0aaaede6047d9a6c5d0cd96a517c854d944ee70a0ebb44\",\n        \"0x1\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns transaction information for the specified block hash and transaction index position.\n\n#### Parameters\n\n`DATA` - 32-byte hash of a block.\n\n`QUANTITY` - Integer representing the transaction index position.\n\n#### Returns\n\nObject - [Transaction object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#transaction-object), or `null` when there is no\ntransaction."
          },
          "response": [
            {
              "id": "b68b6dd2-c43c-420f-914f-26f6a7db67c7",
              "name": "eth_getTransactionByBlockHashAndIndex",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionByBlockHashAndIndex\",\n    \"params\": [\n        \"0xa52be92809541220ee0aaaede6047d9a6c5d0cd96a517c854d944ee70a0ebb44\",\n        \"0x1\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"blockHash\": \"0xbf137c3a7a1ebdfac21252765e5d7f40d115c2757e4a4abee929be88c624fdb7\",\n        \"blockNumber\": \"0x1442e\",\n        \"from\": \"0x70c9217d814985faef62b124420f8dfbddd96433\",\n        \"gas\": \"0x3d090\",\n        \"gasPrice\": \"0x57148a6be\",\n        \"hash\": \"0xfc766a71c406950d4a4955a340a092626c35083c64c7be907060368a5e6811d6\",\n        \"input\": \"0x51a34eb8000000000000000000000000000000000000000000000029b9e659e41b780000\",\n        \"nonce\": \"0x2cb2\",\n        \"to\": \"0xcfdc98ec7f01dab1b67b36373524ce0208dc3953\",\n        \"transactionIndex\": \"0x2\",\n        \"value\": \"0x0\",\n        \"v\": \"0x2a\",\n        \"r\": \"0xa2d2b1021e1428740a7c67af3c05fe3160481889b25b921108ac0ac2c3d5d40a\",\n        \"s\": \"0x63186d2aaefe188748bfb4b46fb9493cbc2b53cf36169e8501a5bc0ed941b484\"\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getTransactionByBlockNumberAndIndex",
          "id": "826400d2-8b2a-43ad-b25c-82c68ae88481",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionByBlockNumberAndIndex\",\n    \"params\": [\n        \"latest\",\n        \"0x0\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns transaction information for the specified block number and transaction index position.\n\n#### Parameters\n\n`QUANTITY|TAG` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n`QUANTITY` - The transaction index position.\n\n#### Returns\n\nObject - [Transaction object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#transaction-object), or `null` when there is no\ntransaction."
          },
          "response": [
            {
              "id": "648c61f6-a738-49dd-936d-664c73b47bbd",
              "name": "eth_getTransactionByBlockNumberAndIndex",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionByBlockNumberAndIndex\",\n    \"params\": [\n        \"latest\",\n        \"0x0\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"blockHash\": \"0xbf137c3a7a1ebdfac21252765e5d7f40d115c2757e4a4abee929be88c624fdb7\",\n        \"blockNumber\": \"0x1442e\",\n        \"from\": \"0x70c9217d814985faef62b124420f8dfbddd96433\",\n        \"gas\": \"0x3d090\",\n        \"gasPrice\": \"0x57148a6be\",\n        \"hash\": \"0xfc766a71c406950d4a4955a340a092626c35083c64c7be907060368a5e6811d6\",\n        \"input\": \"0x51a34eb8000000000000000000000000000000000000000000000029b9e659e41b780000\",\n        \"nonce\": \"0x2cb2\",\n        \"to\": \"0xcfdc98ec7f01dab1b67b36373524ce0208dc3953\",\n        \"transactionIndex\": \"0x2\",\n        \"value\": \"0x0\",\n        \"v\": \"0x2a\",\n        \"r\": \"0xa2d2b1021e1428740a7c67af3c05fe3160481889b25b921108ac0ac2c3d5d40a\",\n        \"s\": \"0x63186d2aaefe188748bfb4b46fb9493cbc2b53cf36169e8501a5bc0ed941b484\"\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getTransactionByHash",
          "id": "95821cd3-2e6a-4163-81ff-2fed48fd37dd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionByHash\",\n    \"params\": [\n        \"0xa52be92809541220ee0aaaede6047d9a6c5d0cd96a517c854d944ee70a0ebb44\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns transaction information for the specified transaction hash.\n\n#### Parameters\n\n`DATA` - 32-byte transaction hash.\n\n#### Returns\n\nObject - [Transaction object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#transaction-object), or `null` when there is no\ntransaction."
          },
          "response": [
            {
              "id": "858f8e8b-9bfc-4b78-b12c-7c5e721a9bba",
              "name": "eth_getTransactionByHash",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionByHash\",\n    \"params\": [\n        \"0xa52be92809541220ee0aaaede6047d9a6c5d0cd96a517c854d944ee70a0ebb44\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": {\n        \"blockHash\": \"0x510efccf44a192e6e34bcb439a1947e24b86244280762cbb006858c237093fda\",\n        \"blockNumber\": \"0x422\",\n        \"from\": \"0xfe3b557e8fb62b89f4916b721be55ceb828dbd73\",\n        \"gas\": \"0x5208\",\n        \"gasPrice\": \"0x3b9aca00\",\n        \"hash\": \"0xa52be92809541220ee0aaaede6047d9a6c5d0cd96a517c854d944ee70a0ebb44\",\n        \"input\": \"0x\",\n        \"nonce\": \"0x1\",\n        \"to\": \"0x627306090abab3a6e1400e9345bc60c78a8bef57\",\n        \"transactionIndex\": \"0x0\",\n        \"value\": \"0x4e1003b28d9280000\",\n        \"v\": \"0xfe7\",\n        \"r\": \"0x84caf09aefbd5e539295acc67217563438a4efb224879b6855f56857fa2037d3\",\n        \"s\": \"0x5e863be3829812c81439f0ae9d8ecb832b531d651fb234c848d1bf45e62be8b9\"\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getTransactionCount",
          "id": "983fba8d-8b1c-477a-8bbe-07e1874c1f9e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionCount\",\n    \"params\": [\n        \"0x9d8f8572f345e1ae53db1dFA4a7fce49B467bD7f\",\n        \"latest\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns the number of transactions sent from a specified address. Use the `pending` tag to get the\nnext account nonce not used by any pending transactions.\n\n#### Parameters\n\n`data` - 20-byte account address.\n\n`quantity|tag` - Integer representing a block number or one of the string tags `latest`,\n`earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result` : *quantity* - Integer representing the number of transactions sent from the specified\naddress."
          },
          "response": [
            {
              "id": "738a30c6-769f-45cf-b45f-f877ffb98f9f",
              "name": "eth_getTransactionCount",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionCount\",\n    \"params\": [\n        \"0x9d8f8572f345e1ae53db1dFA4a7fce49B467bD7f\",\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x1\"\n}"
            }
          ]
        },
        {
          "name": "eth_getTransactionReceipt",
          "id": "65db3e07-b52c-461a-b811-4a50a97ec025",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionReceipt\",\n    \"params\": [\n        \"0x96c6830efd87a70020d4d1647c93402d747c05ecf6beeb068dee621f8d13d8d1\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns the receipt of a transaction by transaction hash. Receipts for pending transactions are not\navailable.\n\nIf you enabled [revert reason](https://besu.hyperledger.org/en/stable/HowTo/Send-Transactions/Revert-Reason), the receipt includes\navailable revert reasons in the response.\n\n#### Parameters\n\n`DATA` - 32-byte hash of a transaction.\n\n#### Returns\n\n`Object` - [Transaction receipt object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#transaction-receipt-object), or `null` when\nthere is no receipt."
          },
          "response": [
            {
              "id": "175d06d4-237a-43af-9abe-627d9630ea5b",
              "name": "eth_getTransactionReceipt",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getTransactionReceipt\",\n    \"params\": [\n        \"0x96c6830efd87a70020d4d1647c93402d747c05ecf6beeb068dee621f8d13d8d1\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"blockHash\": \"0xe7212a92cfb9b06addc80dec2a0dfae9ea94fd344efeb157c41e12994fcad60a\",\n        \"blockNumber\": \"0x50\",\n        \"contractAddress\": null,\n        \"cumulativeGasUsed\": \"0x5208\",\n        \"from\": \"0x627306090abab3a6e1400e9345bc60c78a8bef57\",\n        \"gasUsed\": \"0x5208\",\n        \"logs\": [],\n        \"logsBloom\": \"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n        \"status\": \"0x1\",\n        \"to\": \"0xf17f52151ebef6c7334fad080c5704d77216b732\",\n        \"transactionHash\": \"0xc00e97af59c6f88de163306935f7682af1a34c67245e414537d02e422815efc3\",\n        \"transactionIndex\": \"0x0\"\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getUncleByBlockHashAndIndex",
          "id": "b3a34eb8-51f0-41dd-9432-fdf32b8ccfbd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getUncleByBlockHashAndIndex\",\n    \"params\": [\n        \"0xc48fb64230a82f65a08e7280bd8745e7fea87bc7c206309dee32209fe9a985f7\",\n        \"0x0\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns uncle specified by block hash and index.\n\n#### Parameters\n\n`data` - 32-byte block hash.\n\n`quantity` - Index of the uncle.\n\n#### Returns\n\n`result` : [Block object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#block-object)\n\n> **note**\n>\n> Uncles do not contain individual transactions."
          },
          "response": [
            {
              "id": "94f3a915-18a6-41f7-9cdc-faea4051ce08",
              "name": "eth_getUncleByBlockHashAndIndex",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getUncleByBlockHashAndIndex\",\n    \"params\": [\n        \"0xc48fb64230a82f65a08e7280bd8745e7fea87bc7c206309dee32209fe9a985f7\",\n        \"0x0\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"difficulty\": \"0x76b123df93230\",\n        \"extraData\": \"0x50505945206e616e6f706f6f6c2e6f7267\",\n        \"gasLimit\": \"0x7a121d\",\n        \"gasUsed\": \"0x7a0175\",\n        \"hash\": \"0xc20189c0b1a4a23116ab3b177e929137f6e826f17fc4c2e880e7258c620e9817\",\n        \"logsBloom\": \"0x890086c024487ca422be846a201a10e41bc2882902312116c1119609482031e9c000e2a708004a10281024028020c505727a12570c4810121c59024490b040894406a1c23c37a0094810921da3923600c71c03044b40924280038d07ab91964a008084264a01641380798840805a284cce201a8026045451002500113a00de441001320805ca2840037000111640d090442c11116d2112948084240242340400236ce81502063401dcc214b9105194d050884721c1208800b20501a4201400276004142f118e60808284506979a86e050820101c170c185e2310005205a82a2100382422104182090184800c02489e033440218142140045801c024cc1818485\",\n        \"miner\": \"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\",\n        \"mixHash\": \"0xf557cc827e058862aa3ea1bd6088fb8766f70c0eac4117c56cf85b7911f82a14\",\n        \"nonce\": \"0xd320b48904347cdd\",\n        \"number\": \"0x768964\",\n        \"parentHash\": \"0x98d752708b3677df8f439c4529f999b94663d5494dbfc08909656db3c90f6255\",\n        \"receiptsRoot\": \"0x0f838f0ceb73368e7fc8d713a7761e5be31e3b4beafe1a6875a7f275f82da45b\",\n        \"sha3Uncles\": \"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\n        \"size\": \"0x21a\",\n        \"stateRoot\": \"0xa0c7d4fca79810c89c517eff8dadb9c6d6f4bcc27c2edfb301301e1cf7dec642\",\n        \"timestamp\": \"0x5cdcbba6\",\n        \"totalDifficulty\": \"0x229ad33cabd4c40d23d\",\n        \"transactionsRoot\": \"0x866e38e91d01ef0387b8e07ccf35cd910224271ccf2b7477b8c8439e8b70f365\",\n        \"uncles\": []\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getUncleByBlockNumberAndIndex",
          "id": "db9a9057-5bf8-4da2-8d9a-aa22236950b3",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getUncleByBlockNumberAndIndex\",\n    \"params\": [\n        \"0x7689D2\",\n        \"0x0\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns uncle specified by block number and index.\n\n#### Parameters\n\n`quantity|tag` - Index of the block, or one of the string tags `latest`, `earliest`, or `pending`,\nas described in [Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n`quantity` - Index of the uncle.\n\n#### Returns\n\n`result` : [Block object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#block-object)\n\n> **note**\n>\n> Uncles do not contain individual transactions."
          },
          "response": [
            {
              "id": "754b04c7-5508-40d2-ade7-351e5e59a75f",
              "name": "eth_getUncleByBlockNumberAndIndex",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getUncleByBlockNumberAndIndex\",\n    \"params\": [\n        \"0x7689D2\",\n        \"0x0\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": {\n        \"difficulty\": \"0x77daec467bf93\",\n        \"extraData\": \"0x50505945206e616e6f706f6f6c2e6f7267\",\n        \"gasLimit\": \"0x7a121d\",\n        \"gasUsed\": \"0x7a0f7b\",\n        \"hash\": \"0x42d83ae9c0743f4b1f9c61ff7ea8b164c1bab3627decd49233760680be006ecf\",\n        \"logsBloom\": \"0x888200800000340120220008640200500408006100038400100581c000080240080a0014e8002010080004088040004022402a000c18010001400100002a041141a0610a0052900600041018c0002a0003090020404c00206010010513d00020005380124e08050480710000000108401012b0901c1424006000083a10a8c1040100a0440081050210124400040044304070004001100000012600806008061d0320800000b40042160600002480000000800000c0002100200940801c000820800048024904710000400640490026000a44300309000286088010c2300060003011380006400200812009144042204810209020410a84000410520c08802941\",\n        \"miner\": \"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5\",\n        \"mixHash\": \"0xf977fcdb52868be410b75ef2becc35cc312f13ab0a6ce400ecd9d445f66fa3f2\",\n        \"nonce\": \"0x628b28403bf1e3d3\",\n        \"number\": \"0x7689d0\",\n        \"parentHash\": \"0xb32cfdfbf4adb05d30f02fcc6fe039cc6666402142954051c1a1cb9cc91aa11e\",\n        \"receiptsRoot\": \"0x9c7c8361d1a24ea2841432234c81974a9920d3eba2b2b1c496b5f925a95cb4ac\",\n        \"sha3Uncles\": \"0x7d972aa1b182b7e93f1db043f03fbdbfac6874fe7e67e162141bcc0aefa6336b\",\n        \"size\": \"0x21a\",\n        \"stateRoot\": \"0x74e97b77813146344d75acb5a52a006cc6dfaca678a10fb8a484a8443e919272\",\n        \"timestamp\": \"0x5cdcc0a7\",\n        \"totalDifficulty\": \"0x229b0583b4bd2698ca0\",\n        \"transactionsRoot\": \"0x1d21626afddf05e5866de66ca3fcd98f1caf5357eba0cc6ec675606e116a891b\",\n        \"uncles\": []\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_getUncleCountByBlockHash",
          "id": "1f6d80de-343c-4529-bc7f-9c41195d6da9",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getUncleCountByBlockHash\",\n    \"params\": [\n        \"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns the number of uncles in a block from a block matching the given block hash.\n\n#### Parameters\n\n`DATA` - 32-byte block hash.\n\n#### Returns\n\n`result` : *QUANTITY* - Integer representing the number of uncles in the specified block."
          },
          "response": [
            {
              "id": "81508ffd-e614-4316-bc6b-27b2134478db",
              "name": "eth_getUncleCountByBlockHash",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getUncleCountByBlockHash\",\n    \"params\": [\n        \"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x0\"\n}"
            }
          ]
        },
        {
          "name": "eth_getUncleCountByBlockNumber",
          "id": "fc662114-9052-4533-a4ba-5ec0936b4858",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getUncleCountByBlockNumber\",\n    \"params\": [\n        \"latest\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns the number of uncles in a block matching the specified block number.\n\n#### Parameters\n\n`QUANTITY|TAG` - Integer representing either the index of the block within the blockchain, or one\nof the string tags `latest`, `earliest`, or `pending`, as described in\n[Block Parameter](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/Using-JSON-RPC-API#block-parameter).\n\n#### Returns\n\n`result` : *QUANTITY* - Integer representing the number of uncles in the specified block."
          },
          "response": [
            {
              "id": "f7547036-f05e-4c3d-826a-864cc62c9e09",
              "name": "eth_getUncleCountByBlockNumber",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getUncleCountByBlockNumber\",\n    \"params\": [\n        \"latest\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x1\"\n}"
            }
          ]
        },
        {
          "name": "eth_getWork",
          "id": "215f32bb-2102-47c6-9f7c-6cec96b49079",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getWork\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns the hash of the current block, the seed hash, and the required target boundary condition.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : Array with the following fields:\n\n* `DATA`, 32 Bytes - Hash of the current block header (pow-hash).\n* `DATA`, 32 Bytes - The seed hash used for the DAG.\n* `DATA`, 32 Bytes - The required target boundary condition: 2^256 / difficulty.\n* `QUANTITY` - Hexadecimal integer representing the current block number."
          },
          "response": [
            {
              "id": "e4944524-ce03-4945-b2bb-1e01a83b900e",
              "name": "eth_getWork",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_getWork\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": [\n        \"0xce5e32ca59cb86799a1879e90150b2c3b882852173e59865e9e79abb67a9d636\",\n        \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n        \"0x00a3d70a3d70a3d70a3d70a3d70a3d70a3d70a3d70a3d70a3d70a3d70a3d70a3\",\n        \"0x42\"\n    ]\n}"
            }
          ]
        },
        {
          "name": "eth_hashrate",
          "id": "e199d723-eba2-4232-b82c-198889295d5c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_hashrate\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns the number of hashes per second with which the node is mining.\n\nWhen the stratum server is enabled, this method returns the cumulative hashrate of all sealers\nreporting their hashrate.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : `quantity` - Number of hashes per second.\n"
          },
          "response": [
            {
              "id": "b418b412-5d80-439a-ab56-04ac4e7cbcc0",
              "name": "eth_hashrate",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_hashrate\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x12b\"\n}"
            }
          ]
        },
        {
          "name": "eth_mining",
          "id": "41908f7b-6805-42ef-969f-c6d66fc1158c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_mining\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Whether the client is actively mining new blocks. Besu pauses mining while the client synchronizes\nwith the network regardless of command settings or methods called.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` (*BOOLEAN*) - `true` if the client is actively mining new blocks, otherwise `false`."
          },
          "response": [
            {
              "id": "cf056b47-78db-4031-847d-8b4e40849ecd",
              "name": "eth_mining",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_mining\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 53,\n    \"result\": true\n}"
            }
          ]
        },
        {
          "name": "eth_newBlockFilter",
          "id": "a92b1e3b-10a6-49aa-80cd-27446f8f6e3d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_newBlockFilter\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Creates a filter to retrieve new block hashes. To poll for new blocks, use\n[`eth_getFilterChanges`](#eth_getfilterchanges).\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`data` - Filter ID."
          },
          "response": [
            {
              "id": "953dc7de-bd02-4365-aa85-188b10301555",
              "name": "eth_newBlockFilter",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_newBlockFilter\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x9d78b6780f844228b96ecc65a320a825\"\n}"
            }
          ]
        },
        {
          "name": "eth_newFilter",
          "id": "aefa8800-45d3-42f8-b916-f7079bd90aa0",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_newFilter\",\n    \"params\": [\n        {\n            \"fromBlock\": \"earliest\",\n            \"toBlock\": \"latest\",\n            \"topics\": []\n        }\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Creates a [log filter](https://besu.hyperledger.org/en/stable/Concepts/Events-and-Logs). To poll for logs associated with the\ncreated filter, use [`eth_getFilterChanges`](#eth_getfilterchanges). To get all logs associated with\nthe filter, use [`eth_getFilterLogs`](#eth_getfilterlogs).\n\n#### Parameters\n\n`Object` - [Filter options object](https://besu.hyperledger.org/en/stable/Reference/API-Objects#filter-options-object).\n\n> **note**\n>\n> `fromBlock` and `toBlock` in the filter options object default to `latest`.\n\n#### Returns\n\n`data` - Filter ID."
          },
          "response": [
            {
              "id": "34d50d08-5647-4744-9f37-5d9024e76588",
              "name": "eth_newFilter",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_newFilter\",\n    \"params\": [\n        {\n            \"fromBlock\": \"earliest\",\n            \"toBlock\": \"latest\",\n            \"topics\": []\n        }\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x1ddf0c00989044e9b41cc0ae40272df3\"\n}"
            }
          ]
        },
        {
          "name": "eth_newPendingTransactionFilter",
          "id": "bce61a77-8dcb-49c8-9048-013fa1b9f72d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_newPendingTransactionFilter\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Creates a filter to retrieve new pending transactions hashes. To poll for new pending transactions,\nuse [`eth_getFilterChanges`](#eth_getfilterchanges).\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`data` - Filter ID."
          },
          "response": [
            {
              "id": "85312558-a019-489b-af64-0375c5605ffb",
              "name": "eth_newPendingTransactionFilter",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_newPendingTransactionFilter\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x443d6a77c4964707a8554c92f7e4debd\"\n}"
            }
          ]
        },
        {
          "name": "eth_protocolVersion",
          "id": "548f84a6-6ca2-48e7-ad07-6059b34e3fe0",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_protocolVersion\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns current Ethereum protocol version.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : *quantity* - Ethereum protocol version."
          },
          "response": [
            {
              "id": "27bb9653-6856-45bb-836d-ec2ac0454c85",
              "name": "eth_protocolVersion",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_protocolVersion\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": \"0x3f\"\n}"
            }
          ]
        },
        {
          "name": "eth_sendRawTransaction",
          "id": "ddc35b26-4ad6-424b-824c-e82cbcd2acc6",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_sendRawTransaction\",\n    \"params\": [\n        \"0xf86a018203e882520894f17f52151ebef6c7334fad080c5704d77216b732896c6b935b8bbd400000801ba093129415f03b4794fd1512e79ee7f097e4271f66721020f8407aac92179893a5a0451b875d89721ec98be55201092980b0a87bb1c48507fccb86da713596b2a09e\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Sends a [signed transaction](https://besu.hyperledger.org/en/stable/HowTo/Send-Transactions/Transactions).\nA transaction can send ether, deploy a contract, or interact with a contract.\nSet the maximum transaction fee for transactions using the [`--rpc-tx-feecap`](https://besu.hyperledger.org/en/stable/CLI/CLI-Syntax#rpc-tx-feecap) CLI option.\n\nYou can interact with contracts using [`eth_sendRawTransaction` or `eth_call`].\n\nTo avoid exposing your private key, create signed transactions offline and send the signed\ntransaction data using `eth_sendRawTransaction`.\n\n> **important**\n>\n> Besu does not implement [`eth_sendTransaction`](https://besu.hyperledger.org/en/stable/HowTo/Send-Transactions/Account-Management).\n>\n> [EthSigner](https://docs.ethsigner.consensys.net/) provides transaction signing and implements\n> [`eth_sendTransaction`](https://docs.ethsigner.consensys.net/Using-EthSigner/Using-EthSigner/#eth_sendtransaction).\n\n#### Parameters\n\n`data` -  Signed transaction serialized to hexadecimal format. For example:\n\n`params: [\"0xf869018203e882520894f17f52151ebef6c7334fad080c5704d77216b732881bc16d674ec80000801ba02da1c48b670996dcb1f447ef9ef00b33033c48a4fe938f420bec3e56bfd24071a062e0aa78a81bf0290afbc3a9d8e9a068e6d74caa66c5e0fa8a46deaae96b0833\"]`\n\n> **note**\n>\n> [Creating and Sending Transactions](https://besu.hyperledger.org/en/stable/HowTo/Send-Transactions/Transactions) includes examples of creating signed transactions using the [web3.js](https://github.com/ethereum/web3.js/) library.\n\n#### Returns\n\n`result` : `data` - 32-byte transaction hash."
          },
          "response": [
            {
              "id": "42bf0cb8-31f2-40a0-a18c-b8128db0ac68",
              "name": "eth_sendRawTransaction",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\"jsonrpc\":\"2.0\",\"method\":\"eth_sendRawTransaction\",\"params\" :[\"0xf85f808203e8832dc6c08080914f785b6f626a656374204f626a6563745d1ba004193142058b4fe6802677a939e76f93e7fa30e91835a911e206f9855330929ca055ce11a262c804a168c8a801e55a68b3d578a4b52b9dfbed98c4aa47f88a0adf\"], \"id\":1}"
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Length",
                  "value": "118",
                  "name": "Content-Length",
                  "description": "The length of the response body in octets (8-bit bytes)"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json",
                  "name": "Content-Type",
                  "description": "The mime type of this content"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"jsonrpc\" : \"2.0\",\n  \"id\" : 1,\n  \"result\" : \"0xac182cc23bb94696217aa17ca15bd466106af9ba7ea7420aae24ff37338d6e3b\"\n}"
            }
          ]
        },
        {
          "name": "eth_submitHashrate",
          "id": "b59f08cc-abac-44d1-8db0-debc5abd2303",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_submitHashrate\",\n    \"params\": [\n        \"0x0000000000000000000000000000000000000000000000000000000000500000\",\n        \"0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Submits the mining hashrate.\n\nUsed by mining software such as [Ethminer](https://github.com/ethereum-mining/ethminer).\n\n#### Parameters\n\n* DATA, 32 Bytes - Hexadecimal string representation of the hash rate.\n* DATA, 32 Bytes - Random hexadecimal ID identifying the client.\n\n#### Returns\n\n`result: Boolean`, `true` if submission is successful, otherwise `false`."
          },
          "response": [
            {
              "id": "c938f19e-6986-4a2f-8eba-e50432b7b32c",
              "name": "eth_submitHashrate",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_submitHashrate\",\n    \"params\": [\n        \"0x0000000000000000000000000000000000000000000000000000000000500000\",\n        \"0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": true\n}"
            }
          ]
        },
        {
          "name": "eth_submitWork",
          "id": "313a51eb-cab1-4f05-b779-bd0855c901fc",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_submitWork\",\n    \"params\": [\n        \"0x0000000000000001\",\n        \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n        \"0xD1GE5700000000000000000000000000D1GE5700000000000000000000000000\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Submits a Proof of Work (Ethash) solution.\n\nUsed by mining software such as [Ethminer](https://github.com/ethereum-mining/ethminer).\n\n#### Parameters\n\n* DATA, 8 Bytes - Retrieved nonce.\n* DATA, 32 Bytes - Hash of the block header (PoW-hash).\n* DATA, 32 Bytes - Mix digest.\n\n#### Returns\n\n`result: Boolean`, `true` if the provided solution is valid, otherwise `false`."
          },
          "response": [
            {
              "id": "520cd6ac-5426-476e-84db-24341d4babd7",
              "name": "eth_submitHashrate",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_submitHashrate\",\n    \"params\": [\n        \"0x0000000000000000000000000000000000000000000000000000000000500000\",\n        \"0x59daa26581d0acd1fce254fb7e85952f4c09d0915afd33d3886cd914bc7d283c\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"id\": 1,\n    \"jsonrpc\": \"2.0\",\n    \"result\": true\n}"
            }
          ]
        },
        {
          "name": "eth_syncing",
          "id": "38ce4491-8ec7-4b5b-9f1b-cbd157085e54",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_syncing\",\n    \"params\": [],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Returns an object with data about the synchronization status, or `false` if not synchronizing.\n\n#### Parameters\n\nNone\n\n#### Returns\n\n`result` : *Object|Boolean* - Object with synchronization status data or `false` if not\nsynchronizing:\n\n* `startingBlock` : *quantity* - Index of the highest block on the blockchain when the network\n  synchronization starts.\n* `currentBlock` : *quantity* - Index of the latest block (also known as the best block) for the\n  current node. This is the same index that [`eth_blockNumber`](#eth_blocknumber) returns.\n* `highestBlock`: *quantity* - Index of the highest known block in the peer network (that is, the\n  highest block so far discovered among peer nodes). This is the same value as `currentBlock` if\n  the current node has no peers.\n* `pulledStates`: *quantity* - If fast synchronizing, the number of state entries fetched so far,\n  or `null` if this is not known or not relevant. If full synchronizing or fully synchronized, this\n  field is not returned.\n* `knownStates`: *quantity* - If fast synchronizing, the number of states the node knows of so\n  far, or `null` if this is not known or not relevant. If full synchronizing or fully synchronized,\n  this field is not returned."
          },
          "response": [
            {
              "id": "cb425fe3-d303-4e2d-809b-290deb3decd7",
              "name": "eth_syncing",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_syncing\",\n    \"params\": [],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 51,\n    \"result\": {\n        \"startingBlock\": \"0x0\",\n        \"currentBlock\": \"0x1518\",\n        \"highestBlock\": \"0x9567a3\",\n        \"pulledStates\": \"0x203ca\",\n        \"knownStates\": \"0x200636\"\n    }\n}"
            }
          ]
        },
        {
          "name": "eth_uninstallFilter",
          "id": "ff7f114b-d4e1-4dc7-ad7c-abc7104005b3",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_uninstallFilter\",\n    \"params\": [\n        \"0x70355a0b574b437eaa19fe95adfedc0a\"\n    ],\n    \"id\": 1\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "http://{{rpc-http-host}}:{{rpc-http-port}}",
            "description": "Uninstalls a filter with the specified ID. When a filter is no longer required, call this method.\n\nFilters time out when not requested by [`eth_getFilterChanges`](#eth_getfilterchanges) or [`eth_getFilterLogs`](#eth_getfilterlogs) for 10\nminutes.\n\n#### Parameters\n\n`data` - Filter ID.\n\n#### Returns\n\n`Boolean` - `true` if the filter was successfully uninstalled, otherwise `false`."
          },
          "response": [
            {
              "id": "14ceabe0-dd90-4cd0-9bba-6f3ca42e2641",
              "name": "eth_uninstallFilter",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"eth_uninstallFilter\",\n    \"params\": [\n        \"0x70355a0b574b437eaa19fe95adfedc0a\"\n    ],\n    \"id\": 1\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": "http://{{rpc-http-host}}:{{rpc-http-port}}"
              },
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": null,
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 1,\n    \"result\": true\n}"
            }
          ]
        }
      ],
      "id": "f9507a30-c79d-42de-af2a-27a59a31bc86",
      "description": "> **Note**\n>\n> Methods with an equivalent [GraphQL](https://besu.hyperledger.org/en/stable/HowTo/Interact/APIs/GraphQL) query include a GraphQL\n    request and result in the method example. The parameter and result descriptions apply to the\n    JSON-RPC requests. The GraphQL specification is defined in the [schema](https://github.com/hyperledger/besu/blob/master/ethereum/api/src/main/resources/schema.graphqls)."
    },
    {
      "name": "mev_peerCount",
      "id": "1b1adfaf-7c38-4c51-95f2-20d75af36dde",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\"jsonrpc\":\"2.0\",\"method\":\"mev_peerCount\",\"params\":[],\"id\":1}"
        },
        "url": "http://127.0.0.1:32777/jsonrpc"
      },
      "response": []
    },
    {
      "name": "eth_blockNumber",
      "id": "f9d4fce1-8b40-4599-9e05-674341d2ea67",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}"
        },
        "url": "http://127.0.0.1:32777/jsonrpc"
      },
      "response": []
    },
    {
      "name": "eth_getBalance",
      "id": "af378a46-8181-428f-b3a1-404e0d9653c5",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getBalance\",\"params\":[\"0xFE3B557E8Fb62b89F4916B721be55cEb828dBd73\",\"latest\"],\"id\":1}"
        },
        "url": "http://localhost:32777/jsonrpc"
      },
      "response": []
    },
    {
      "name": "eth_getTransactionReceipt",
      "id": "f0aa6efa-2bf8-4985-8d8f-38c8e299f6ed",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getTransactionReceipt\",\"params\" :[\"0x66d26d0519207971a8c37b3a7130e564635538a307b678bec0adbe06891896e1\"], \"id\":1}"
        },
        "url": "http://localhost:32777/jsonrpc"
      },
      "response": []
    },
    {
      "name": "eth_getTransactionByHash",
      "id": "a8b2a34d-1e0f-46b0-a279-161c07704f15",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getTransactionByHash\",\"params\":[\n\"0x66d26d0519207971a8c37b3a7130e564635538a307b678bec0adbe06891896e1\"\n],\"id\":1}"
        },
        "url": "http://127.0.0.1:32777/jsonrpc"
      },
      "response": []
    },
    {
      "name": "mev_sendBundleTransaction",
      "id": "da45ffbd-5af2-4797-b187-bc35d8069e1f",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"eth_sendBundle\",\n  \"params\": [\n    {\n      txs,               \n      blockNumber,       \n      minTimestamp,      \n      maxTimestamp,      \n      revertingTxHashes, \n    }\n  ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": ""
      },
      "response": []
    },
    {
      "name": "check_liveness",
      "id": "b84d6024-179d-44c1-b0cb-9cae1b2924aa",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [],
        "url": "https://api.staging.sushirelay.com/v1",
        "description": "Healthcheck for RPC Endpoint Livenesss State"
      },
      "response": []
    },
    {
      "name": "eth_sendBundle",
      "id": "19f1c5fc-2f06-49b1-83df-90bfc5e1b7bf",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"eth_sendBundle\",\n  \"params\": [\n    {\n      txs,               \n      blockNumber,       \n      minTimestamp,      \n      maxTimestamp,      \n      revertingTxHashes, \n    }\n  ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "",
        "description": "## eth_sendBundle \n\nThis RPC Method has the following payload format\n\n Array[String], A list of signed transactions to execute in an atomic bundle\n\n String, a hex encoded block number for which this bundle is valid on\n\n (Optional) Number, the minimum timestamp for which this bundle is valid, in seconds since the unix epoch\n\n (Optional) Number, the maximum timestamp for which this bundle is valid, in seconds since the unix epoch\n\n (Optional) Array[String], A list of tx hashes that are allowed to revert"
      },
      "response": []
    },
    {
      "name": "flashbots_getUserStats",
      "id": "80c264d7-13e9-4112-8172-25d55ab6800e",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [],
        "url": null
      },
      "response": []
    },
    {
      "name": "eth_callBundle",
      "id": "1cc0cba5-d2af-4ff1-953e-e43c12cabefb",
      "protocolProfileBehavior": {
        "disableBodyPruning": true,
        "disabledSystemHeaders": {
          "user-agent": true
        }
      },
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"eth_callBundle\",\n  \"params\": [\n    {\n      txs,               \n      blockNumber,       \n      stateBlockNumber,  \n      timestamp,      \n    }\n  ]\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": "",
        "description": "eth_callBundle can be used to simulate a bundle against a specific block number, including simulating a bundle at the top of the next block. "
      },
      "response": []
    }
  ]
}
